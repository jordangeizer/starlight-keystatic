import { collection, config, fields, singleton } from '@keystatic/core';
import { repeating, wrapper } from '@keystatic/core/content-components';
import asideSchema from 'src/content/docs/components/aside-schema';

// Dodgy but works...
import { Icons } from 'node_modules/@astrojs/starlight/components/Icons';

const iconsList = Object.keys(Icons).map(icon => ({
  label: icon,
  value: icon,
}));

export default config({
  storage: {
    kind: 'local',
  },
  ui: {
    brand: {
      name: 'Starlight',
    },
  },
  collections: {
    components: collection({
      label: 'Components',
      path: 'src/content/docs/components/**',
      slugField: 'title',
      entryLayout: 'content',
      format: {
        contentField: 'content',
      },
      schema: {
        title: fields.slug({ name: { label: 'Title' } }),
        description: fields.text({ label: 'Description', multiline: true }),
        editUrl: fields.url({
          label: 'Edit url',
          description:
            'Overrides the global editLink config. Set to false to disable the “Edit page” link for a specific page or provide an alternative URL where the content of this page is editable.',
        }),
        template: fields.select({
          label: 'Template',
          options: [
            { label: 'Doc', value: 'doc' },
            { label: 'Splash', value: 'splash' },
          ],
          defaultValue: 'doc',
        }),
        pagefind: fields.checkbox({
          label: 'Show in search results',
          defaultValue: true,
          description:
            'Set whether this page should be included in the Pagefind search index. Set to false to exclude a page from search results.',
        }),
        draft: fields.checkbox({
          label: 'Draft',
          description:
            'Set whether this page should be considered a draft and not be included in production builds and autogenerated link groups. Set to true to mark a page as a draft and make it only visible during development.',
        }),
        hero: fields.object(
          {
            title: fields.text({ label: 'Title' }),
            tagline: fields.text({ label: 'Tagline' }),
            actions: fields.array(
              fields.object({
                text: fields.text({ label: 'Text' }),
                link: fields.text({ label: 'Link' }),
                icon: fields.select({
                  label: 'Icon',
                  options: iconsList,
                  defaultValue: iconsList[0].value,
                }),
                variant: fields.select({
                  label: 'Variant',
                  options: [
                    { label: 'Primary', value: 'primary' },
                    { label: 'Secondary', value: 'secondary' },
                    { label: 'Minimal', value: 'minimal' },
                  ],
                  defaultValue: 'minimal',
                }),
              }),
              {
                label: 'Actions',
                itemLabel: data => data.fields.text.value,
              }
            ),
          },
          { label: 'Hero' }
        ),
        sidebar: fields.object(
          {
            label: fields.text({
              label: 'Label',
              description:
                'Set the label for this page in the sidebar when displayed in an autogenerated group of links.',
            }),
            order: fields.number({
              label: 'Order',
              description:
                'Control the order of this page when sorting an autogenerated group of links. Lower numbers are displayed higher up in the link group.',
            }),
            hidden: fields.checkbox({
              label: 'Hide',
              description:
                'Prevents this page from being included in an autogenerated sidebar group.',
            }),
            badge: fields.text({
              label: 'Badge',
              description:
                'Add a badge to the page in the sidebar when displayed in an autogenerated group of links.',
            }),
          },
          {
            label: 'Sidebar',
            description:
              'Control how this page is displayed in the sidebar, when using an autogenerated link group.',
          }
        ),
        content: fields.mdx({
          label: 'Content',
          components: {
            ...asideSchema,
            CardGrid: repeating({
              label: 'Card Grid',
              children: ['Card'],
              schema: {
                stagger: fields.checkbox({
                  label: 'Stagger',
                  description: 'Check to stagger the cards',
                }),
              },
            }),
            Card: wrapper({
              label: 'Card',
              schema: {
                title: fields.text({ label: 'Title' }),
                icon: fields.select({
                  label: 'Icon',
                  options: iconsList,
                  defaultValue: iconsList[0].value,
                }),
              },
            }),
          },
        }),
      },
    }),
  },
  singletons: {
    sidebar: singleton({
      label: 'Sidebar',
      path: 'src/data/sidebar',
      format: {
        data: 'json',
      },
      schema: {
        sections: fields.array(
          fields.object({
            label: fields.text({ label: 'Label' }),
            kind: fields.conditional(
              fields.select({
                label: 'Kind',
                options: [
                  { label: 'Items', value: 'items' },
                  { label: 'Autogenerate', value: 'autogenerate' },
                ],
                defaultValue: 'items',
              }),
              {
                items: fields.array(
                  fields.object({
                    label: fields.text({ label: 'Label' }),
                    link: fields.text({ label: 'Link' }),
                  }),
                  {
                    label: 'Items',
                    itemLabel: data => data.fields.label.value,
                  }
                ),
                autogenerate: fields.object({
                  directory: fields.text({ label: 'Directory' }),
                }),
              }
            ),
          }),
          { label: 'Links', itemLabel: data => data.fields.label.value }
        ),
      },
    }),
  },
});
